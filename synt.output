State 170 conflicts: 1 shift/reduce


Grammar

    0 $accept: PROG $end

    1 PROG: ROUTINE PROG
    2     | PP
    3     | /* empty */

    4 PP: mc_program idf CORP_PROGRAM

    5 CORP_PROGRAM: LIST_DECLARATION LIST_INSTRUCTION mc_end

    6 ROUTINE: TYPE mc_routine idf po LIST_PARAMETRE pf CORP_FONCTION
    7        | mc_character mc_routine idf opar_mult CST po LIST_PARAMETRE pf CORP_FONCTION

    8 CORP_FONCTION: LIST_DECLARATION LIST_INSTRUCTION RETURN mc_endr

    9 RETURN: idf aff EXPRESSION pvg

   10 OPAR: opar_plus
   11     | opar_moins
   12     | opar_div
   13     | opar_mult

   14 TYPE: mc_integer
   15     | mc_real
   16     | mc_logical

   17 LIST_PARAMETRE: idf
   18               | LIST_PARAMETRE vg idf
   19               | CST
   20               | LIST_PARAMETRE vg CST
   21               | LIST_PARAMETRE vg idf po CST pf
   22               | LIST_PARAMETRE vg idf po CST vg CST pf
   23               | /* empty */

   24 LIST_DECLARATION: LIST_DECLARATION TYPE DECLARATION pvg
   25                 | LIST_DECLARATION mc_character DECLARATION pvg
   26                 | /* empty */

   27 DECLARATION: idf
   28            | DECLARATION vg idf
   29            | DECLARATION mc_dimension po CST pf
   30            | DECLARATION mc_dimension po CST vg CST pf
   31            | DECLARATION opar_mult CST

   32 AFFECT: idf aff EXPRESSION

   33 EXPRESSION: CST
   34           | idf
   35           | cst_char
   36           | cst_bool
   37           | EXPRESSION OPAR idf
   38           | EXPRESSION OPAR CST
   39           | po EXPRESSION pf
   40           | CALL
   41           | EXPRESSION OPAR cst_char
   42           | EXPRESSION po CST pf
   43           | EXPRESSION po CST vg CST pf
   44           | EXPRESSION OPAR po EXPRESSION pf

   45 CALL: mc_call idf po LIST_PARAMETRE pf

   46 READ: mc_read po idf pf

   47 WRITE: mc_write po WRITE_ARGS pf

   48 WRITE_ARGS: cst_char
   49           | idf
   50           | WRITE_ARGS vg cst_char
   51           | WRITE_ARGS vg idf

   52 CONDITION: mc_if po exp_cnd pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif
   53          | mc_if po cst_bool pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

   54 exp_cnd: EXPRESSION point OPCOMP point EXPRESSION
   55        | exp_cnd point OPLOG point LALR
   56        | LALR

   57 LALR: po exp_cnd pf

   58 INSTRUCTION: AFFECT pvg
   59            | WRITE pvg
   60            | READ pvg
   61            | CONDITION
   62            | BOUCLE
   63            | EQ pvg

   64 LIST_INSTRUCTION: LIST_INSTRUCTION INSTRUCTION
   65                 | /* empty */

   66 BOUCLE: mc_dowhile po exp_cnd pf LIST_INSTRUCTION mc_enddo

   67 EQ: mc_equivalence po LIST_PARAMETRE pf vg po LIST_PARAMETRE pf
   68   | mc_equivalence po LIST_PARAMETRE pf

   69 CST: cst_int
   70    | cst_float

   71 OPLOG: op_and
   72      | op_or

   73 OPCOMP: op_gt
   74       | op_lt
   75       | op_eq
   76       | op_ge
   77       | op_le
   78       | op_ne


Terminals, with rules where they appear

$end (0) 0
error (256)
aff (258) 9 32
point (259) 54 55
po (260) 6 7 21 22 29 30 39 42 43 44 45 46 47 52 53 57 66 67 68
pf (261) 6 7 21 22 29 30 39 42 43 44 45 46 47 52 53 57 66 67 68
vg (262) 18 20 21 22 28 30 43 50 51 67
idf (263) 4 6 7 9 17 18 21 22 27 28 32 34 37 45 46 49 51
pvg (264) 9 24 25 58 59 60 63
mc_then (265) 52 53
mc_if (266) 52 53
mc_else (267) 52 53
mc_program (268) 4
mc_endif (269) 52 53
mc_character (270) 7 25
mc_real (271) 15
mc_enddo (272) 66
mc_read (273) 46
mc_write (274) 47
mc_integer (275) 14
mc_endr (276) 8
mc_routine (277) 6 7
mc_equivalence (278) 67 68
mc_dowhile (279) 66
mc_end (280) 5
mc_call (281) 45
mc_dimension (282) 29 30
mc_logical (283) 16
cst_char (284) 35 41 48 50
opar_plus (285) 10
opar_moins (286) 11
opar_div (287) 12
opar_mult (288) 7 13 31
cst_bool (289) 36 53
cst_int (290) 69
cst_float (291) 70
op_gt (292) 73
op_lt (293) 74
op_eq (294) 75
op_ge (295) 76
op_le (296) 77
op_and (297) 71
op_or (298) 72
op_ne (299) 78


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
PROG (46)
    on left: 1 2 3, on right: 0 1
PP (47)
    on left: 4, on right: 2
CORP_PROGRAM (48)
    on left: 5, on right: 4
ROUTINE (49)
    on left: 6 7, on right: 1
CORP_FONCTION (50)
    on left: 8, on right: 6 7
RETURN (51)
    on left: 9, on right: 8
OPAR (52)
    on left: 10 11 12 13, on right: 37 38 41 44
TYPE (53)
    on left: 14 15 16, on right: 6 24
LIST_PARAMETRE (54)
    on left: 17 18 19 20 21 22 23, on right: 6 7 18 20 21 22 45 67
    68
LIST_DECLARATION (55)
    on left: 24 25 26, on right: 5 8 24 25
DECLARATION (56)
    on left: 27 28 29 30 31, on right: 24 25 28 29 30 31
AFFECT (57)
    on left: 32, on right: 58
EXPRESSION (58)
    on left: 33 34 35 36 37 38 39 40 41 42 43 44, on right: 9 32 37
    38 39 41 42 43 44 54
CALL (59)
    on left: 45, on right: 40
READ (60)
    on left: 46, on right: 60
WRITE (61)
    on left: 47, on right: 59
WRITE_ARGS (62)
    on left: 48 49 50 51, on right: 47 50 51
CONDITION (63)
    on left: 52 53, on right: 61
exp_cnd (64)
    on left: 54 55 56, on right: 52 55 57 66
LALR (65)
    on left: 57, on right: 55 56
INSTRUCTION (66)
    on left: 58 59 60 61 62 63, on right: 64
LIST_INSTRUCTION (67)
    on left: 64 65, on right: 5 8 52 53 64 66
BOUCLE (68)
    on left: 66, on right: 62
EQ (69)
    on left: 67 68, on right: 63
CST (70)
    on left: 69 70, on right: 7 19 20 21 22 29 30 31 33 38 42 43
OPLOG (71)
    on left: 71 72, on right: 55
OPCOMP (72)
    on left: 73 74 75 76 77 78, on right: 54


state 0

    0 $accept: . PROG $end

    mc_program    shift, and go to state 1
    mc_character  shift, and go to state 2
    mc_real       shift, and go to state 3
    mc_integer    shift, and go to state 4
    mc_logical    shift, and go to state 5

    $default  reduce using rule 3 (PROG)

    PROG     go to state 6
    PP       go to state 7
    ROUTINE  go to state 8
    TYPE     go to state 9


state 1

    4 PP: mc_program . idf CORP_PROGRAM

    idf  shift, and go to state 10


state 2

    7 ROUTINE: mc_character . mc_routine idf opar_mult CST po LIST_PARAMETRE pf CORP_FONCTION

    mc_routine  shift, and go to state 11


state 3

   15 TYPE: mc_real .

    $default  reduce using rule 15 (TYPE)


state 4

   14 TYPE: mc_integer .

    $default  reduce using rule 14 (TYPE)


state 5

   16 TYPE: mc_logical .

    $default  reduce using rule 16 (TYPE)


state 6

    0 $accept: PROG . $end

    $end  shift, and go to state 12


state 7

    2 PROG: PP .

    $default  reduce using rule 2 (PROG)


state 8

    1 PROG: ROUTINE . PROG

    mc_program    shift, and go to state 1
    mc_character  shift, and go to state 2
    mc_real       shift, and go to state 3
    mc_integer    shift, and go to state 4
    mc_logical    shift, and go to state 5

    $default  reduce using rule 3 (PROG)

    PROG     go to state 13
    PP       go to state 7
    ROUTINE  go to state 8
    TYPE     go to state 9


state 9

    6 ROUTINE: TYPE . mc_routine idf po LIST_PARAMETRE pf CORP_FONCTION

    mc_routine  shift, and go to state 14


state 10

    4 PP: mc_program idf . CORP_PROGRAM

    $default  reduce using rule 26 (LIST_DECLARATION)

    CORP_PROGRAM      go to state 15
    LIST_DECLARATION  go to state 16


state 11

    7 ROUTINE: mc_character mc_routine . idf opar_mult CST po LIST_PARAMETRE pf CORP_FONCTION

    idf  shift, and go to state 17


state 12

    0 $accept: PROG $end .

    $default  accept


state 13

    1 PROG: ROUTINE PROG .

    $default  reduce using rule 1 (PROG)


state 14

    6 ROUTINE: TYPE mc_routine . idf po LIST_PARAMETRE pf CORP_FONCTION

    idf  shift, and go to state 18


state 15

    4 PP: mc_program idf CORP_PROGRAM .

    $default  reduce using rule 4 (PP)


state 16

    5 CORP_PROGRAM: LIST_DECLARATION . LIST_INSTRUCTION mc_end
   24 LIST_DECLARATION: LIST_DECLARATION . TYPE DECLARATION pvg
   25                 | LIST_DECLARATION . mc_character DECLARATION pvg

    mc_character  shift, and go to state 19
    mc_real       shift, and go to state 3
    mc_integer    shift, and go to state 4
    mc_logical    shift, and go to state 5

    $default  reduce using rule 65 (LIST_INSTRUCTION)

    TYPE              go to state 20
    LIST_INSTRUCTION  go to state 21


state 17

    7 ROUTINE: mc_character mc_routine idf . opar_mult CST po LIST_PARAMETRE pf CORP_FONCTION

    opar_mult  shift, and go to state 22


state 18

    6 ROUTINE: TYPE mc_routine idf . po LIST_PARAMETRE pf CORP_FONCTION

    po  shift, and go to state 23


state 19

   25 LIST_DECLARATION: LIST_DECLARATION mc_character . DECLARATION pvg

    idf  shift, and go to state 24

    DECLARATION  go to state 25


state 20

   24 LIST_DECLARATION: LIST_DECLARATION TYPE . DECLARATION pvg

    idf  shift, and go to state 24

    DECLARATION  go to state 26


state 21

    5 CORP_PROGRAM: LIST_DECLARATION LIST_INSTRUCTION . mc_end
   64 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION

    idf             shift, and go to state 27
    mc_if           shift, and go to state 28
    mc_read         shift, and go to state 29
    mc_write        shift, and go to state 30
    mc_equivalence  shift, and go to state 31
    mc_dowhile      shift, and go to state 32
    mc_end          shift, and go to state 33

    AFFECT       go to state 34
    READ         go to state 35
    WRITE        go to state 36
    CONDITION    go to state 37
    INSTRUCTION  go to state 38
    BOUCLE       go to state 39
    EQ           go to state 40


state 22

    7 ROUTINE: mc_character mc_routine idf opar_mult . CST po LIST_PARAMETRE pf CORP_FONCTION

    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    CST  go to state 43


state 23

    6 ROUTINE: TYPE mc_routine idf po . LIST_PARAMETRE pf CORP_FONCTION

    idf        shift, and go to state 44
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    $default  reduce using rule 23 (LIST_PARAMETRE)

    LIST_PARAMETRE  go to state 45
    CST             go to state 46


state 24

   27 DECLARATION: idf .

    $default  reduce using rule 27 (DECLARATION)


state 25

   25 LIST_DECLARATION: LIST_DECLARATION mc_character DECLARATION . pvg
   28 DECLARATION: DECLARATION . vg idf
   29            | DECLARATION . mc_dimension po CST pf
   30            | DECLARATION . mc_dimension po CST vg CST pf
   31            | DECLARATION . opar_mult CST

    vg            shift, and go to state 47
    pvg           shift, and go to state 48
    mc_dimension  shift, and go to state 49
    opar_mult     shift, and go to state 50


state 26

   24 LIST_DECLARATION: LIST_DECLARATION TYPE DECLARATION . pvg
   28 DECLARATION: DECLARATION . vg idf
   29            | DECLARATION . mc_dimension po CST pf
   30            | DECLARATION . mc_dimension po CST vg CST pf
   31            | DECLARATION . opar_mult CST

    vg            shift, and go to state 47
    pvg           shift, and go to state 51
    mc_dimension  shift, and go to state 49
    opar_mult     shift, and go to state 50


state 27

   32 AFFECT: idf . aff EXPRESSION

    aff  shift, and go to state 52


state 28

   52 CONDITION: mc_if . po exp_cnd pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif
   53          | mc_if . po cst_bool pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    po  shift, and go to state 53


state 29

   46 READ: mc_read . po idf pf

    po  shift, and go to state 54


state 30

   47 WRITE: mc_write . po WRITE_ARGS pf

    po  shift, and go to state 55


state 31

   67 EQ: mc_equivalence . po LIST_PARAMETRE pf vg po LIST_PARAMETRE pf
   68   | mc_equivalence . po LIST_PARAMETRE pf

    po  shift, and go to state 56


state 32

   66 BOUCLE: mc_dowhile . po exp_cnd pf LIST_INSTRUCTION mc_enddo

    po  shift, and go to state 57


state 33

    5 CORP_PROGRAM: LIST_DECLARATION LIST_INSTRUCTION mc_end .

    $default  reduce using rule 5 (CORP_PROGRAM)


state 34

   58 INSTRUCTION: AFFECT . pvg

    pvg  shift, and go to state 58


state 35

   60 INSTRUCTION: READ . pvg

    pvg  shift, and go to state 59


state 36

   59 INSTRUCTION: WRITE . pvg

    pvg  shift, and go to state 60


state 37

   61 INSTRUCTION: CONDITION .

    $default  reduce using rule 61 (INSTRUCTION)


state 38

   64 LIST_INSTRUCTION: LIST_INSTRUCTION INSTRUCTION .

    $default  reduce using rule 64 (LIST_INSTRUCTION)


state 39

   62 INSTRUCTION: BOUCLE .

    $default  reduce using rule 62 (INSTRUCTION)


state 40

   63 INSTRUCTION: EQ . pvg

    pvg  shift, and go to state 61


state 41

   69 CST: cst_int .

    $default  reduce using rule 69 (CST)


state 42

   70 CST: cst_float .

    $default  reduce using rule 70 (CST)


state 43

    7 ROUTINE: mc_character mc_routine idf opar_mult CST . po LIST_PARAMETRE pf CORP_FONCTION

    po  shift, and go to state 62


state 44

   17 LIST_PARAMETRE: idf .

    $default  reduce using rule 17 (LIST_PARAMETRE)


state 45

    6 ROUTINE: TYPE mc_routine idf po LIST_PARAMETRE . pf CORP_FONCTION
   18 LIST_PARAMETRE: LIST_PARAMETRE . vg idf
   20               | LIST_PARAMETRE . vg CST
   21               | LIST_PARAMETRE . vg idf po CST pf
   22               | LIST_PARAMETRE . vg idf po CST vg CST pf

    pf  shift, and go to state 63
    vg  shift, and go to state 64


state 46

   19 LIST_PARAMETRE: CST .

    $default  reduce using rule 19 (LIST_PARAMETRE)


state 47

   28 DECLARATION: DECLARATION vg . idf

    idf  shift, and go to state 65


state 48

   25 LIST_DECLARATION: LIST_DECLARATION mc_character DECLARATION pvg .

    $default  reduce using rule 25 (LIST_DECLARATION)


state 49

   29 DECLARATION: DECLARATION mc_dimension . po CST pf
   30            | DECLARATION mc_dimension . po CST vg CST pf

    po  shift, and go to state 66


state 50

   31 DECLARATION: DECLARATION opar_mult . CST

    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    CST  go to state 67


state 51

   24 LIST_DECLARATION: LIST_DECLARATION TYPE DECLARATION pvg .

    $default  reduce using rule 24 (LIST_DECLARATION)


state 52

   32 AFFECT: idf aff . EXPRESSION

    po         shift, and go to state 68
    idf        shift, and go to state 69
    mc_call    shift, and go to state 70
    cst_char   shift, and go to state 71
    cst_bool   shift, and go to state 72
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    EXPRESSION  go to state 73
    CALL        go to state 74
    CST         go to state 75


state 53

   52 CONDITION: mc_if po . exp_cnd pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif
   53          | mc_if po . cst_bool pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    po         shift, and go to state 76
    idf        shift, and go to state 69
    mc_call    shift, and go to state 70
    cst_char   shift, and go to state 71
    cst_bool   shift, and go to state 77
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    EXPRESSION  go to state 78
    CALL        go to state 74
    exp_cnd     go to state 79
    LALR        go to state 80
    CST         go to state 75


state 54

   46 READ: mc_read po . idf pf

    idf  shift, and go to state 81


state 55

   47 WRITE: mc_write po . WRITE_ARGS pf

    idf       shift, and go to state 82
    cst_char  shift, and go to state 83

    WRITE_ARGS  go to state 84


state 56

   67 EQ: mc_equivalence po . LIST_PARAMETRE pf vg po LIST_PARAMETRE pf
   68   | mc_equivalence po . LIST_PARAMETRE pf

    idf        shift, and go to state 44
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    $default  reduce using rule 23 (LIST_PARAMETRE)

    LIST_PARAMETRE  go to state 85
    CST             go to state 46


state 57

   66 BOUCLE: mc_dowhile po . exp_cnd pf LIST_INSTRUCTION mc_enddo

    po         shift, and go to state 76
    idf        shift, and go to state 69
    mc_call    shift, and go to state 70
    cst_char   shift, and go to state 71
    cst_bool   shift, and go to state 72
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    EXPRESSION  go to state 78
    CALL        go to state 74
    exp_cnd     go to state 86
    LALR        go to state 80
    CST         go to state 75


state 58

   58 INSTRUCTION: AFFECT pvg .

    $default  reduce using rule 58 (INSTRUCTION)


state 59

   60 INSTRUCTION: READ pvg .

    $default  reduce using rule 60 (INSTRUCTION)


state 60

   59 INSTRUCTION: WRITE pvg .

    $default  reduce using rule 59 (INSTRUCTION)


state 61

   63 INSTRUCTION: EQ pvg .

    $default  reduce using rule 63 (INSTRUCTION)


state 62

    7 ROUTINE: mc_character mc_routine idf opar_mult CST po . LIST_PARAMETRE pf CORP_FONCTION

    idf        shift, and go to state 44
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    $default  reduce using rule 23 (LIST_PARAMETRE)

    LIST_PARAMETRE  go to state 87
    CST             go to state 46


state 63

    6 ROUTINE: TYPE mc_routine idf po LIST_PARAMETRE pf . CORP_FONCTION

    $default  reduce using rule 26 (LIST_DECLARATION)

    CORP_FONCTION     go to state 88
    LIST_DECLARATION  go to state 89


state 64

   18 LIST_PARAMETRE: LIST_PARAMETRE vg . idf
   20               | LIST_PARAMETRE vg . CST
   21               | LIST_PARAMETRE vg . idf po CST pf
   22               | LIST_PARAMETRE vg . idf po CST vg CST pf

    idf        shift, and go to state 90
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    CST  go to state 91


state 65

   28 DECLARATION: DECLARATION vg idf .

    $default  reduce using rule 28 (DECLARATION)


state 66

   29 DECLARATION: DECLARATION mc_dimension po . CST pf
   30            | DECLARATION mc_dimension po . CST vg CST pf

    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    CST  go to state 92


state 67

   31 DECLARATION: DECLARATION opar_mult CST .

    $default  reduce using rule 31 (DECLARATION)


state 68

   39 EXPRESSION: po . EXPRESSION pf

    po         shift, and go to state 68
    idf        shift, and go to state 69
    mc_call    shift, and go to state 70
    cst_char   shift, and go to state 71
    cst_bool   shift, and go to state 72
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    EXPRESSION  go to state 93
    CALL        go to state 74
    CST         go to state 75


state 69

   34 EXPRESSION: idf .

    $default  reduce using rule 34 (EXPRESSION)


state 70

   45 CALL: mc_call . idf po LIST_PARAMETRE pf

    idf  shift, and go to state 94


state 71

   35 EXPRESSION: cst_char .

    $default  reduce using rule 35 (EXPRESSION)


state 72

   36 EXPRESSION: cst_bool .

    $default  reduce using rule 36 (EXPRESSION)


state 73

   32 AFFECT: idf aff EXPRESSION .
   37 EXPRESSION: EXPRESSION . OPAR idf
   38           | EXPRESSION . OPAR CST
   41           | EXPRESSION . OPAR cst_char
   42           | EXPRESSION . po CST pf
   43           | EXPRESSION . po CST vg CST pf
   44           | EXPRESSION . OPAR po EXPRESSION pf

    po          shift, and go to state 95
    opar_plus   shift, and go to state 96
    opar_moins  shift, and go to state 97
    opar_div    shift, and go to state 98
    opar_mult   shift, and go to state 99

    $default  reduce using rule 32 (AFFECT)

    OPAR  go to state 100


state 74

   40 EXPRESSION: CALL .

    $default  reduce using rule 40 (EXPRESSION)


state 75

   33 EXPRESSION: CST .

    $default  reduce using rule 33 (EXPRESSION)


state 76

   39 EXPRESSION: po . EXPRESSION pf
   57 LALR: po . exp_cnd pf

    po         shift, and go to state 76
    idf        shift, and go to state 69
    mc_call    shift, and go to state 70
    cst_char   shift, and go to state 71
    cst_bool   shift, and go to state 72
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    EXPRESSION  go to state 101
    CALL        go to state 74
    exp_cnd     go to state 102
    LALR        go to state 80
    CST         go to state 75


state 77

   36 EXPRESSION: cst_bool .
   53 CONDITION: mc_if po cst_bool . pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    pf  shift, and go to state 103

    $default  reduce using rule 36 (EXPRESSION)


state 78

   37 EXPRESSION: EXPRESSION . OPAR idf
   38           | EXPRESSION . OPAR CST
   41           | EXPRESSION . OPAR cst_char
   42           | EXPRESSION . po CST pf
   43           | EXPRESSION . po CST vg CST pf
   44           | EXPRESSION . OPAR po EXPRESSION pf
   54 exp_cnd: EXPRESSION . point OPCOMP point EXPRESSION

    point       shift, and go to state 104
    po          shift, and go to state 95
    opar_plus   shift, and go to state 96
    opar_moins  shift, and go to state 97
    opar_div    shift, and go to state 98
    opar_mult   shift, and go to state 99

    OPAR  go to state 100


state 79

   52 CONDITION: mc_if po exp_cnd . pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif
   55 exp_cnd: exp_cnd . point OPLOG point LALR

    point  shift, and go to state 105
    pf     shift, and go to state 106


state 80

   56 exp_cnd: LALR .

    $default  reduce using rule 56 (exp_cnd)


state 81

   46 READ: mc_read po idf . pf

    pf  shift, and go to state 107


state 82

   49 WRITE_ARGS: idf .

    $default  reduce using rule 49 (WRITE_ARGS)


state 83

   48 WRITE_ARGS: cst_char .

    $default  reduce using rule 48 (WRITE_ARGS)


state 84

   47 WRITE: mc_write po WRITE_ARGS . pf
   50 WRITE_ARGS: WRITE_ARGS . vg cst_char
   51           | WRITE_ARGS . vg idf

    pf  shift, and go to state 108
    vg  shift, and go to state 109


state 85

   18 LIST_PARAMETRE: LIST_PARAMETRE . vg idf
   20               | LIST_PARAMETRE . vg CST
   21               | LIST_PARAMETRE . vg idf po CST pf
   22               | LIST_PARAMETRE . vg idf po CST vg CST pf
   67 EQ: mc_equivalence po LIST_PARAMETRE . pf vg po LIST_PARAMETRE pf
   68   | mc_equivalence po LIST_PARAMETRE . pf

    pf  shift, and go to state 110
    vg  shift, and go to state 64


state 86

   55 exp_cnd: exp_cnd . point OPLOG point LALR
   66 BOUCLE: mc_dowhile po exp_cnd . pf LIST_INSTRUCTION mc_enddo

    point  shift, and go to state 105
    pf     shift, and go to state 111


state 87

    7 ROUTINE: mc_character mc_routine idf opar_mult CST po LIST_PARAMETRE . pf CORP_FONCTION
   18 LIST_PARAMETRE: LIST_PARAMETRE . vg idf
   20               | LIST_PARAMETRE . vg CST
   21               | LIST_PARAMETRE . vg idf po CST pf
   22               | LIST_PARAMETRE . vg idf po CST vg CST pf

    pf  shift, and go to state 112
    vg  shift, and go to state 64


state 88

    6 ROUTINE: TYPE mc_routine idf po LIST_PARAMETRE pf CORP_FONCTION .

    $default  reduce using rule 6 (ROUTINE)


state 89

    8 CORP_FONCTION: LIST_DECLARATION . LIST_INSTRUCTION RETURN mc_endr
   24 LIST_DECLARATION: LIST_DECLARATION . TYPE DECLARATION pvg
   25                 | LIST_DECLARATION . mc_character DECLARATION pvg

    mc_character  shift, and go to state 19
    mc_real       shift, and go to state 3
    mc_integer    shift, and go to state 4
    mc_logical    shift, and go to state 5

    $default  reduce using rule 65 (LIST_INSTRUCTION)

    TYPE              go to state 20
    LIST_INSTRUCTION  go to state 113


state 90

   18 LIST_PARAMETRE: LIST_PARAMETRE vg idf .
   21               | LIST_PARAMETRE vg idf . po CST pf
   22               | LIST_PARAMETRE vg idf . po CST vg CST pf

    po  shift, and go to state 114

    $default  reduce using rule 18 (LIST_PARAMETRE)


state 91

   20 LIST_PARAMETRE: LIST_PARAMETRE vg CST .

    $default  reduce using rule 20 (LIST_PARAMETRE)


state 92

   29 DECLARATION: DECLARATION mc_dimension po CST . pf
   30            | DECLARATION mc_dimension po CST . vg CST pf

    pf  shift, and go to state 115
    vg  shift, and go to state 116


state 93

   37 EXPRESSION: EXPRESSION . OPAR idf
   38           | EXPRESSION . OPAR CST
   39           | po EXPRESSION . pf
   41           | EXPRESSION . OPAR cst_char
   42           | EXPRESSION . po CST pf
   43           | EXPRESSION . po CST vg CST pf
   44           | EXPRESSION . OPAR po EXPRESSION pf

    po          shift, and go to state 95
    pf          shift, and go to state 117
    opar_plus   shift, and go to state 96
    opar_moins  shift, and go to state 97
    opar_div    shift, and go to state 98
    opar_mult   shift, and go to state 99

    OPAR  go to state 100


state 94

   45 CALL: mc_call idf . po LIST_PARAMETRE pf

    po  shift, and go to state 118


state 95

   42 EXPRESSION: EXPRESSION po . CST pf
   43           | EXPRESSION po . CST vg CST pf

    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    CST  go to state 119


state 96

   10 OPAR: opar_plus .

    $default  reduce using rule 10 (OPAR)


state 97

   11 OPAR: opar_moins .

    $default  reduce using rule 11 (OPAR)


state 98

   12 OPAR: opar_div .

    $default  reduce using rule 12 (OPAR)


state 99

   13 OPAR: opar_mult .

    $default  reduce using rule 13 (OPAR)


state 100

   37 EXPRESSION: EXPRESSION OPAR . idf
   38           | EXPRESSION OPAR . CST
   41           | EXPRESSION OPAR . cst_char
   44           | EXPRESSION OPAR . po EXPRESSION pf

    po         shift, and go to state 120
    idf        shift, and go to state 121
    cst_char   shift, and go to state 122
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    CST  go to state 123


state 101

   37 EXPRESSION: EXPRESSION . OPAR idf
   38           | EXPRESSION . OPAR CST
   39           | po EXPRESSION . pf
   41           | EXPRESSION . OPAR cst_char
   42           | EXPRESSION . po CST pf
   43           | EXPRESSION . po CST vg CST pf
   44           | EXPRESSION . OPAR po EXPRESSION pf
   54 exp_cnd: EXPRESSION . point OPCOMP point EXPRESSION

    point       shift, and go to state 104
    po          shift, and go to state 95
    pf          shift, and go to state 117
    opar_plus   shift, and go to state 96
    opar_moins  shift, and go to state 97
    opar_div    shift, and go to state 98
    opar_mult   shift, and go to state 99

    OPAR  go to state 100


state 102

   55 exp_cnd: exp_cnd . point OPLOG point LALR
   57 LALR: po exp_cnd . pf

    point  shift, and go to state 105
    pf     shift, and go to state 124


state 103

   53 CONDITION: mc_if po cst_bool pf . mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    mc_then  shift, and go to state 125


state 104

   54 exp_cnd: EXPRESSION point . OPCOMP point EXPRESSION

    op_gt  shift, and go to state 126
    op_lt  shift, and go to state 127
    op_eq  shift, and go to state 128
    op_ge  shift, and go to state 129
    op_le  shift, and go to state 130
    op_ne  shift, and go to state 131

    OPCOMP  go to state 132


state 105

   55 exp_cnd: exp_cnd point . OPLOG point LALR

    op_and  shift, and go to state 133
    op_or   shift, and go to state 134

    OPLOG  go to state 135


state 106

   52 CONDITION: mc_if po exp_cnd pf . mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    mc_then  shift, and go to state 136


state 107

   46 READ: mc_read po idf pf .

    $default  reduce using rule 46 (READ)


state 108

   47 WRITE: mc_write po WRITE_ARGS pf .

    $default  reduce using rule 47 (WRITE)


state 109

   50 WRITE_ARGS: WRITE_ARGS vg . cst_char
   51           | WRITE_ARGS vg . idf

    idf       shift, and go to state 137
    cst_char  shift, and go to state 138


state 110

   67 EQ: mc_equivalence po LIST_PARAMETRE pf . vg po LIST_PARAMETRE pf
   68   | mc_equivalence po LIST_PARAMETRE pf .

    vg  shift, and go to state 139

    $default  reduce using rule 68 (EQ)


state 111

   66 BOUCLE: mc_dowhile po exp_cnd pf . LIST_INSTRUCTION mc_enddo

    $default  reduce using rule 65 (LIST_INSTRUCTION)

    LIST_INSTRUCTION  go to state 140


state 112

    7 ROUTINE: mc_character mc_routine idf opar_mult CST po LIST_PARAMETRE pf . CORP_FONCTION

    $default  reduce using rule 26 (LIST_DECLARATION)

    CORP_FONCTION     go to state 141
    LIST_DECLARATION  go to state 89


state 113

    8 CORP_FONCTION: LIST_DECLARATION LIST_INSTRUCTION . RETURN mc_endr
   64 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION

    idf             shift, and go to state 142
    mc_if           shift, and go to state 28
    mc_read         shift, and go to state 29
    mc_write        shift, and go to state 30
    mc_equivalence  shift, and go to state 31
    mc_dowhile      shift, and go to state 32

    RETURN       go to state 143
    AFFECT       go to state 34
    READ         go to state 35
    WRITE        go to state 36
    CONDITION    go to state 37
    INSTRUCTION  go to state 38
    BOUCLE       go to state 39
    EQ           go to state 40


state 114

   21 LIST_PARAMETRE: LIST_PARAMETRE vg idf po . CST pf
   22               | LIST_PARAMETRE vg idf po . CST vg CST pf

    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    CST  go to state 144


state 115

   29 DECLARATION: DECLARATION mc_dimension po CST pf .

    $default  reduce using rule 29 (DECLARATION)


state 116

   30 DECLARATION: DECLARATION mc_dimension po CST vg . CST pf

    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    CST  go to state 145


state 117

   39 EXPRESSION: po EXPRESSION pf .

    $default  reduce using rule 39 (EXPRESSION)


state 118

   45 CALL: mc_call idf po . LIST_PARAMETRE pf

    idf        shift, and go to state 44
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    $default  reduce using rule 23 (LIST_PARAMETRE)

    LIST_PARAMETRE  go to state 146
    CST             go to state 46


state 119

   42 EXPRESSION: EXPRESSION po CST . pf
   43           | EXPRESSION po CST . vg CST pf

    pf  shift, and go to state 147
    vg  shift, and go to state 148


state 120

   44 EXPRESSION: EXPRESSION OPAR po . EXPRESSION pf

    po         shift, and go to state 68
    idf        shift, and go to state 69
    mc_call    shift, and go to state 70
    cst_char   shift, and go to state 71
    cst_bool   shift, and go to state 72
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    EXPRESSION  go to state 149
    CALL        go to state 74
    CST         go to state 75


state 121

   37 EXPRESSION: EXPRESSION OPAR idf .

    $default  reduce using rule 37 (EXPRESSION)


state 122

   41 EXPRESSION: EXPRESSION OPAR cst_char .

    $default  reduce using rule 41 (EXPRESSION)


state 123

   38 EXPRESSION: EXPRESSION OPAR CST .

    $default  reduce using rule 38 (EXPRESSION)


state 124

   57 LALR: po exp_cnd pf .

    $default  reduce using rule 57 (LALR)


state 125

   53 CONDITION: mc_if po cst_bool pf mc_then . LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    $default  reduce using rule 65 (LIST_INSTRUCTION)

    LIST_INSTRUCTION  go to state 150


state 126

   73 OPCOMP: op_gt .

    $default  reduce using rule 73 (OPCOMP)


state 127

   74 OPCOMP: op_lt .

    $default  reduce using rule 74 (OPCOMP)


state 128

   75 OPCOMP: op_eq .

    $default  reduce using rule 75 (OPCOMP)


state 129

   76 OPCOMP: op_ge .

    $default  reduce using rule 76 (OPCOMP)


state 130

   77 OPCOMP: op_le .

    $default  reduce using rule 77 (OPCOMP)


state 131

   78 OPCOMP: op_ne .

    $default  reduce using rule 78 (OPCOMP)


state 132

   54 exp_cnd: EXPRESSION point OPCOMP . point EXPRESSION

    point  shift, and go to state 151


state 133

   71 OPLOG: op_and .

    $default  reduce using rule 71 (OPLOG)


state 134

   72 OPLOG: op_or .

    $default  reduce using rule 72 (OPLOG)


state 135

   55 exp_cnd: exp_cnd point OPLOG . point LALR

    point  shift, and go to state 152


state 136

   52 CONDITION: mc_if po exp_cnd pf mc_then . LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    $default  reduce using rule 65 (LIST_INSTRUCTION)

    LIST_INSTRUCTION  go to state 153


state 137

   51 WRITE_ARGS: WRITE_ARGS vg idf .

    $default  reduce using rule 51 (WRITE_ARGS)


state 138

   50 WRITE_ARGS: WRITE_ARGS vg cst_char .

    $default  reduce using rule 50 (WRITE_ARGS)


state 139

   67 EQ: mc_equivalence po LIST_PARAMETRE pf vg . po LIST_PARAMETRE pf

    po  shift, and go to state 154


state 140

   64 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION
   66 BOUCLE: mc_dowhile po exp_cnd pf LIST_INSTRUCTION . mc_enddo

    idf             shift, and go to state 27
    mc_if           shift, and go to state 28
    mc_enddo        shift, and go to state 155
    mc_read         shift, and go to state 29
    mc_write        shift, and go to state 30
    mc_equivalence  shift, and go to state 31
    mc_dowhile      shift, and go to state 32

    AFFECT       go to state 34
    READ         go to state 35
    WRITE        go to state 36
    CONDITION    go to state 37
    INSTRUCTION  go to state 38
    BOUCLE       go to state 39
    EQ           go to state 40


state 141

    7 ROUTINE: mc_character mc_routine idf opar_mult CST po LIST_PARAMETRE pf CORP_FONCTION .

    $default  reduce using rule 7 (ROUTINE)


state 142

    9 RETURN: idf . aff EXPRESSION pvg
   32 AFFECT: idf . aff EXPRESSION

    aff  shift, and go to state 156


state 143

    8 CORP_FONCTION: LIST_DECLARATION LIST_INSTRUCTION RETURN . mc_endr

    mc_endr  shift, and go to state 157


state 144

   21 LIST_PARAMETRE: LIST_PARAMETRE vg idf po CST . pf
   22               | LIST_PARAMETRE vg idf po CST . vg CST pf

    pf  shift, and go to state 158
    vg  shift, and go to state 159


state 145

   30 DECLARATION: DECLARATION mc_dimension po CST vg CST . pf

    pf  shift, and go to state 160


state 146

   18 LIST_PARAMETRE: LIST_PARAMETRE . vg idf
   20               | LIST_PARAMETRE . vg CST
   21               | LIST_PARAMETRE . vg idf po CST pf
   22               | LIST_PARAMETRE . vg idf po CST vg CST pf
   45 CALL: mc_call idf po LIST_PARAMETRE . pf

    pf  shift, and go to state 161
    vg  shift, and go to state 64


state 147

   42 EXPRESSION: EXPRESSION po CST pf .

    $default  reduce using rule 42 (EXPRESSION)


state 148

   43 EXPRESSION: EXPRESSION po CST vg . CST pf

    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    CST  go to state 162


state 149

   37 EXPRESSION: EXPRESSION . OPAR idf
   38           | EXPRESSION . OPAR CST
   41           | EXPRESSION . OPAR cst_char
   42           | EXPRESSION . po CST pf
   43           | EXPRESSION . po CST vg CST pf
   44           | EXPRESSION . OPAR po EXPRESSION pf
   44           | EXPRESSION OPAR po EXPRESSION . pf

    po          shift, and go to state 95
    pf          shift, and go to state 163
    opar_plus   shift, and go to state 96
    opar_moins  shift, and go to state 97
    opar_div    shift, and go to state 98
    opar_mult   shift, and go to state 99

    OPAR  go to state 100


state 150

   53 CONDITION: mc_if po cst_bool pf mc_then LIST_INSTRUCTION . mc_else LIST_INSTRUCTION mc_endif
   64 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION

    idf             shift, and go to state 27
    mc_if           shift, and go to state 28
    mc_else         shift, and go to state 164
    mc_read         shift, and go to state 29
    mc_write        shift, and go to state 30
    mc_equivalence  shift, and go to state 31
    mc_dowhile      shift, and go to state 32

    AFFECT       go to state 34
    READ         go to state 35
    WRITE        go to state 36
    CONDITION    go to state 37
    INSTRUCTION  go to state 38
    BOUCLE       go to state 39
    EQ           go to state 40


state 151

   54 exp_cnd: EXPRESSION point OPCOMP point . EXPRESSION

    po         shift, and go to state 68
    idf        shift, and go to state 69
    mc_call    shift, and go to state 70
    cst_char   shift, and go to state 71
    cst_bool   shift, and go to state 72
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    EXPRESSION  go to state 165
    CALL        go to state 74
    CST         go to state 75


state 152

   55 exp_cnd: exp_cnd point OPLOG point . LALR

    po  shift, and go to state 166

    LALR  go to state 167


state 153

   52 CONDITION: mc_if po exp_cnd pf mc_then LIST_INSTRUCTION . mc_else LIST_INSTRUCTION mc_endif
   64 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION

    idf             shift, and go to state 27
    mc_if           shift, and go to state 28
    mc_else         shift, and go to state 168
    mc_read         shift, and go to state 29
    mc_write        shift, and go to state 30
    mc_equivalence  shift, and go to state 31
    mc_dowhile      shift, and go to state 32

    AFFECT       go to state 34
    READ         go to state 35
    WRITE        go to state 36
    CONDITION    go to state 37
    INSTRUCTION  go to state 38
    BOUCLE       go to state 39
    EQ           go to state 40


state 154

   67 EQ: mc_equivalence po LIST_PARAMETRE pf vg po . LIST_PARAMETRE pf

    idf        shift, and go to state 44
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    $default  reduce using rule 23 (LIST_PARAMETRE)

    LIST_PARAMETRE  go to state 169
    CST             go to state 46


state 155

   66 BOUCLE: mc_dowhile po exp_cnd pf LIST_INSTRUCTION mc_enddo .

    $default  reduce using rule 66 (BOUCLE)


state 156

    9 RETURN: idf aff . EXPRESSION pvg
   32 AFFECT: idf aff . EXPRESSION

    po         shift, and go to state 68
    idf        shift, and go to state 69
    mc_call    shift, and go to state 70
    cst_char   shift, and go to state 71
    cst_bool   shift, and go to state 72
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    EXPRESSION  go to state 170
    CALL        go to state 74
    CST         go to state 75


state 157

    8 CORP_FONCTION: LIST_DECLARATION LIST_INSTRUCTION RETURN mc_endr .

    $default  reduce using rule 8 (CORP_FONCTION)


state 158

   21 LIST_PARAMETRE: LIST_PARAMETRE vg idf po CST pf .

    $default  reduce using rule 21 (LIST_PARAMETRE)


state 159

   22 LIST_PARAMETRE: LIST_PARAMETRE vg idf po CST vg . CST pf

    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    CST  go to state 171


state 160

   30 DECLARATION: DECLARATION mc_dimension po CST vg CST pf .

    $default  reduce using rule 30 (DECLARATION)


state 161

   45 CALL: mc_call idf po LIST_PARAMETRE pf .

    $default  reduce using rule 45 (CALL)


state 162

   43 EXPRESSION: EXPRESSION po CST vg CST . pf

    pf  shift, and go to state 172


state 163

   44 EXPRESSION: EXPRESSION OPAR po EXPRESSION pf .

    $default  reduce using rule 44 (EXPRESSION)


state 164

   53 CONDITION: mc_if po cst_bool pf mc_then LIST_INSTRUCTION mc_else . LIST_INSTRUCTION mc_endif

    $default  reduce using rule 65 (LIST_INSTRUCTION)

    LIST_INSTRUCTION  go to state 173


state 165

   37 EXPRESSION: EXPRESSION . OPAR idf
   38           | EXPRESSION . OPAR CST
   41           | EXPRESSION . OPAR cst_char
   42           | EXPRESSION . po CST pf
   43           | EXPRESSION . po CST vg CST pf
   44           | EXPRESSION . OPAR po EXPRESSION pf
   54 exp_cnd: EXPRESSION point OPCOMP point EXPRESSION .

    po          shift, and go to state 95
    opar_plus   shift, and go to state 96
    opar_moins  shift, and go to state 97
    opar_div    shift, and go to state 98
    opar_mult   shift, and go to state 99

    $default  reduce using rule 54 (exp_cnd)

    OPAR  go to state 100


state 166

   57 LALR: po . exp_cnd pf

    po         shift, and go to state 76
    idf        shift, and go to state 69
    mc_call    shift, and go to state 70
    cst_char   shift, and go to state 71
    cst_bool   shift, and go to state 72
    cst_int    shift, and go to state 41
    cst_float  shift, and go to state 42

    EXPRESSION  go to state 78
    CALL        go to state 74
    exp_cnd     go to state 102
    LALR        go to state 80
    CST         go to state 75


state 167

   55 exp_cnd: exp_cnd point OPLOG point LALR .

    $default  reduce using rule 55 (exp_cnd)


state 168

   52 CONDITION: mc_if po exp_cnd pf mc_then LIST_INSTRUCTION mc_else . LIST_INSTRUCTION mc_endif

    $default  reduce using rule 65 (LIST_INSTRUCTION)

    LIST_INSTRUCTION  go to state 174


state 169

   18 LIST_PARAMETRE: LIST_PARAMETRE . vg idf
   20               | LIST_PARAMETRE . vg CST
   21               | LIST_PARAMETRE . vg idf po CST pf
   22               | LIST_PARAMETRE . vg idf po CST vg CST pf
   67 EQ: mc_equivalence po LIST_PARAMETRE pf vg po LIST_PARAMETRE . pf

    pf  shift, and go to state 175
    vg  shift, and go to state 64


state 170

    9 RETURN: idf aff EXPRESSION . pvg
   32 AFFECT: idf aff EXPRESSION .
   37 EXPRESSION: EXPRESSION . OPAR idf
   38           | EXPRESSION . OPAR CST
   41           | EXPRESSION . OPAR cst_char
   42           | EXPRESSION . po CST pf
   43           | EXPRESSION . po CST vg CST pf
   44           | EXPRESSION . OPAR po EXPRESSION pf

    po          shift, and go to state 95
    pvg         shift, and go to state 176
    opar_plus   shift, and go to state 96
    opar_moins  shift, and go to state 97
    opar_div    shift, and go to state 98
    opar_mult   shift, and go to state 99

    pvg  [reduce using rule 32 (AFFECT)]

    OPAR  go to state 100


state 171

   22 LIST_PARAMETRE: LIST_PARAMETRE vg idf po CST vg CST . pf

    pf  shift, and go to state 177


state 172

   43 EXPRESSION: EXPRESSION po CST vg CST pf .

    $default  reduce using rule 43 (EXPRESSION)


state 173

   53 CONDITION: mc_if po cst_bool pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION . mc_endif
   64 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION

    idf             shift, and go to state 27
    mc_if           shift, and go to state 28
    mc_endif        shift, and go to state 178
    mc_read         shift, and go to state 29
    mc_write        shift, and go to state 30
    mc_equivalence  shift, and go to state 31
    mc_dowhile      shift, and go to state 32

    AFFECT       go to state 34
    READ         go to state 35
    WRITE        go to state 36
    CONDITION    go to state 37
    INSTRUCTION  go to state 38
    BOUCLE       go to state 39
    EQ           go to state 40


state 174

   52 CONDITION: mc_if po exp_cnd pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION . mc_endif
   64 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION

    idf             shift, and go to state 27
    mc_if           shift, and go to state 28
    mc_endif        shift, and go to state 179
    mc_read         shift, and go to state 29
    mc_write        shift, and go to state 30
    mc_equivalence  shift, and go to state 31
    mc_dowhile      shift, and go to state 32

    AFFECT       go to state 34
    READ         go to state 35
    WRITE        go to state 36
    CONDITION    go to state 37
    INSTRUCTION  go to state 38
    BOUCLE       go to state 39
    EQ           go to state 40


state 175

   67 EQ: mc_equivalence po LIST_PARAMETRE pf vg po LIST_PARAMETRE pf .

    $default  reduce using rule 67 (EQ)


state 176

    9 RETURN: idf aff EXPRESSION pvg .

    $default  reduce using rule 9 (RETURN)


state 177

   22 LIST_PARAMETRE: LIST_PARAMETRE vg idf po CST vg CST pf .

    $default  reduce using rule 22 (LIST_PARAMETRE)


state 178

   53 CONDITION: mc_if po cst_bool pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif .

    $default  reduce using rule 53 (CONDITION)


state 179

   52 CONDITION: mc_if po exp_cnd pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif .

    $default  reduce using rule 52 (CONDITION)
