Grammar

    0 $accept: PROG $end

    1 PROG: ROUTINE PROG
    2     | PP

    3 $@1: /* empty */

    4 PP: mc_program idf $@1 CORP_PROGRAM

    5 CORP_PROGRAM: LIST_DECLARATION LIST_INSTRUCTION mc_end

    6 $@2: /* empty */

    7 ROUTINE: TYPE mc_routine idf $@2 po LIST_PARAMETRE pf CORP_FONCTION

    8 $@3: /* empty */

    9 ROUTINE: mc_character mc_routine idf $@3 opar_mult CST po LIST_PARAMETRE pf CORP_FONCTION

   10 $@4: /* empty */

   11 ROUTINE: mc_character mc_routine idf $@4 po LIST_PARAMETRE pf CORP_FONCTION

   12 CORP_FONCTION: LIST_DECLARATION LIST_INSTRUCTION RETURN mc_endr

   13 RETURN: idf aff EXPRESSION

   14 OPAR: opar_plus
   15     | opar_moins
   16     | opar_div
   17     | opar_mult

   18 TYPE: mc_integer
   19     | mc_real
   20     | mc_logical

   21 LIST_PARAMETRE: idf
   22               | LIST_PARAMETRE vg idf
   23               | CST
   24               | LIST_PARAMETRE vg CST
   25               | LIST_PARAMETRE vg idf po CST pf
   26               | LIST_PARAMETRE vg idf po CST vg CST pf
   27               | /* empty */

   28 LIST_DECLARATION: LIST_DECLARATION TYPE DECLARATION pvg
   29                 | LIST_DECLARATION mc_character DECLARATION pvg
   30                 | /* empty */

   31 DECLARATION: idf
   32            | DECLARATION vg idf
   33            | DECLARATION mc_dimension po CST pf
   34            | DECLARATION mc_dimension po CST vg CST pf
   35            | DECLARATION opar_mult CST

   36 AFFECT: idf aff EXPRESSION

   37 EXPRESSION: CST
   38           | idf
   39           | cst_char
   40           | cst_bool
   41           | EXPRESSION OPAR idf
   42           | EXPRESSION OPAR CST
   43           | po EXPRESSION pf
   44           | CALL
   45           | EXPRESSION OPAR cst_char
   46           | EXPRESSION po CST pf
   47           | EXPRESSION po CST vg CST pf
   48           | EXPRESSION OPAR po EXPRESSION pf

   49 CALL: mc_call idf po LIST_PARAMETRE pf

   50 READ: mc_read po idf pf

   51 WRITE: mc_write po WRITE_ARGS pf

   52 WRITE_ARGS: cst_char
   53           | idf
   54           | WRITE_ARGS vg cst_char
   55           | WRITE_ARGS vg idf

   56 CONDITION: mc_if po exp_cnd pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif
   57          | mc_if po cst_bool pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

   58 exp_cnd: EXPRESSION point OPCOMP point EXPRESSION
   59        | exp_cnd point OPLOG point LALR
   60        | LALR

   61 LALR: po exp_cnd pf

   62 INSTRUCTION: AFFECT pvg
   63            | WRITE pvg
   64            | READ pvg
   65            | CONDITION
   66            | BOUCLE
   67            | EQ pvg

   68 LIST_INSTRUCTION: LIST_INSTRUCTION INSTRUCTION
   69                 | /* empty */

   70 BOUCLE: mc_dowhile po exp_cnd pf LIST_INSTRUCTION mc_enddo

   71 EQ: mc_equivalence po LIST_PARAMETRE pf vg po LIST_PARAMETRE pf
   72   | mc_equivalence po LIST_PARAMETRE pf

   73 CST: cst_int
   74    | cst_real

   75 OPLOG: op_and
   76      | op_or

   77 OPCOMP: op_gt
   78       | op_lt
   79       | op_eq
   80       | op_ge
   81       | op_le
   82       | op_ne


Terminals, with rules where they appear

$end (0) 0
error (256)
aff (258) 13 36
point (259) 58 59
po (260) 7 9 11 25 26 33 34 43 46 47 48 49 50 51 56 57 61 70 71 72
pf (261) 7 9 11 25 26 33 34 43 46 47 48 49 50 51 56 57 61 70 71 72
vg (262) 22 24 25 26 32 34 47 54 55 71
idf (263) 4 7 9 11 13 21 22 25 26 31 32 36 38 41 49 50 53 55
pvg (264) 28 29 62 63 64 67
mc_then (265) 56 57
mc_if (266) 56 57
mc_else (267) 56 57
mc_program (268) 4
mc_endif (269) 56 57
mc_character (270) 9 11 29
mc_real (271) 19
mc_enddo (272) 70
mc_read (273) 50
mc_write (274) 51
mc_integer (275) 18
mc_endr (276) 12
mc_routine (277) 7 9 11
mc_equivalence (278) 71 72
mc_dowhile (279) 70
mc_end (280) 5
mc_call (281) 49
mc_dimension (282) 33 34
mc_logical (283) 20
cst_char (284) 39 45 52 54
opar_plus (285) 14
opar_moins (286) 15
opar_div (287) 16
opar_mult (288) 9 17 35
cst_bool (289) 40 57
cst_int (290) 73
cst_real (291) 74
op_gt (292) 77
op_lt (293) 78
op_eq (294) 79
op_ge (295) 80
op_le (296) 81
op_and (297) 75
op_or (298) 76
op_ne (299) 82


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
PROG (46)
    on left: 1 2, on right: 0 1
PP (47)
    on left: 4, on right: 2
$@1 (48)
    on left: 3, on right: 4
CORP_PROGRAM (49)
    on left: 5, on right: 4
ROUTINE (50)
    on left: 7 9 11, on right: 1
$@2 (51)
    on left: 6, on right: 7
$@3 (52)
    on left: 8, on right: 9
$@4 (53)
    on left: 10, on right: 11
CORP_FONCTION (54)
    on left: 12, on right: 7 9 11
RETURN (55)
    on left: 13, on right: 12
OPAR (56)
    on left: 14 15 16 17, on right: 41 42 45 48
TYPE (57)
    on left: 18 19 20, on right: 7 28
LIST_PARAMETRE (58)
    on left: 21 22 23 24 25 26 27, on right: 7 9 11 22 24 25 26 49
    71 72
LIST_DECLARATION (59)
    on left: 28 29 30, on right: 5 12 28 29
DECLARATION (60)
    on left: 31 32 33 34 35, on right: 28 29 32 33 34 35
AFFECT (61)
    on left: 36, on right: 62
EXPRESSION (62)
    on left: 37 38 39 40 41 42 43 44 45 46 47 48, on right: 13 36 41
    42 43 45 46 47 48 58
CALL (63)
    on left: 49, on right: 44
READ (64)
    on left: 50, on right: 64
WRITE (65)
    on left: 51, on right: 63
WRITE_ARGS (66)
    on left: 52 53 54 55, on right: 51 54 55
CONDITION (67)
    on left: 56 57, on right: 65
exp_cnd (68)
    on left: 58 59 60, on right: 56 59 61 70
LALR (69)
    on left: 61, on right: 59 60
INSTRUCTION (70)
    on left: 62 63 64 65 66 67, on right: 68
LIST_INSTRUCTION (71)
    on left: 68 69, on right: 5 12 56 57 68 70
BOUCLE (72)
    on left: 70, on right: 66
EQ (73)
    on left: 71 72, on right: 67
CST (74)
    on left: 73 74, on right: 9 23 24 25 26 33 34 35 37 42 46 47
OPLOG (75)
    on left: 75 76, on right: 59
OPCOMP (76)
    on left: 77 78 79 80 81 82, on right: 58


state 0

    0 $accept: . PROG $end

    mc_program    shift, and go to state 1
    mc_character  shift, and go to state 2
    mc_real       shift, and go to state 3
    mc_integer    shift, and go to state 4
    mc_logical    shift, and go to state 5

    PROG     go to state 6
    PP       go to state 7
    ROUTINE  go to state 8
    TYPE     go to state 9


state 1

    4 PP: mc_program . idf $@1 CORP_PROGRAM

    idf  shift, and go to state 10


state 2

    9 ROUTINE: mc_character . mc_routine idf $@3 opar_mult CST po LIST_PARAMETRE pf CORP_FONCTION
   11        | mc_character . mc_routine idf $@4 po LIST_PARAMETRE pf CORP_FONCTION

    mc_routine  shift, and go to state 11


state 3

   19 TYPE: mc_real .

    $default  reduce using rule 19 (TYPE)


state 4

   18 TYPE: mc_integer .

    $default  reduce using rule 18 (TYPE)


state 5

   20 TYPE: mc_logical .

    $default  reduce using rule 20 (TYPE)


state 6

    0 $accept: PROG . $end

    $end  shift, and go to state 12


state 7

    2 PROG: PP .

    $default  reduce using rule 2 (PROG)


state 8

    1 PROG: ROUTINE . PROG

    mc_program    shift, and go to state 1
    mc_character  shift, and go to state 2
    mc_real       shift, and go to state 3
    mc_integer    shift, and go to state 4
    mc_logical    shift, and go to state 5

    PROG     go to state 13
    PP       go to state 7
    ROUTINE  go to state 8
    TYPE     go to state 9


state 9

    7 ROUTINE: TYPE . mc_routine idf $@2 po LIST_PARAMETRE pf CORP_FONCTION

    mc_routine  shift, and go to state 14


state 10

    4 PP: mc_program idf . $@1 CORP_PROGRAM

    $default  reduce using rule 3 ($@1)

    $@1  go to state 15


state 11

    9 ROUTINE: mc_character mc_routine . idf $@3 opar_mult CST po LIST_PARAMETRE pf CORP_FONCTION
   11        | mc_character mc_routine . idf $@4 po LIST_PARAMETRE pf CORP_FONCTION

    idf  shift, and go to state 16


state 12

    0 $accept: PROG $end .

    $default  accept


state 13

    1 PROG: ROUTINE PROG .

    $default  reduce using rule 1 (PROG)


state 14

    7 ROUTINE: TYPE mc_routine . idf $@2 po LIST_PARAMETRE pf CORP_FONCTION

    idf  shift, and go to state 17


state 15

    4 PP: mc_program idf $@1 . CORP_PROGRAM

    $default  reduce using rule 30 (LIST_DECLARATION)

    CORP_PROGRAM      go to state 18
    LIST_DECLARATION  go to state 19


state 16

    9 ROUTINE: mc_character mc_routine idf . $@3 opar_mult CST po LIST_PARAMETRE pf CORP_FONCTION
   11        | mc_character mc_routine idf . $@4 po LIST_PARAMETRE pf CORP_FONCTION

    po        reduce using rule 10 ($@4)
    $default  reduce using rule 8 ($@3)

    $@3  go to state 20
    $@4  go to state 21


state 17

    7 ROUTINE: TYPE mc_routine idf . $@2 po LIST_PARAMETRE pf CORP_FONCTION

    $default  reduce using rule 6 ($@2)

    $@2  go to state 22


state 18

    4 PP: mc_program idf $@1 CORP_PROGRAM .

    $default  reduce using rule 4 (PP)


state 19

    5 CORP_PROGRAM: LIST_DECLARATION . LIST_INSTRUCTION mc_end
   28 LIST_DECLARATION: LIST_DECLARATION . TYPE DECLARATION pvg
   29                 | LIST_DECLARATION . mc_character DECLARATION pvg

    mc_character  shift, and go to state 23
    mc_real       shift, and go to state 3
    mc_integer    shift, and go to state 4
    mc_logical    shift, and go to state 5

    $default  reduce using rule 69 (LIST_INSTRUCTION)

    TYPE              go to state 24
    LIST_INSTRUCTION  go to state 25


state 20

    9 ROUTINE: mc_character mc_routine idf $@3 . opar_mult CST po LIST_PARAMETRE pf CORP_FONCTION

    opar_mult  shift, and go to state 26


state 21

   11 ROUTINE: mc_character mc_routine idf $@4 . po LIST_PARAMETRE pf CORP_FONCTION

    po  shift, and go to state 27


state 22

    7 ROUTINE: TYPE mc_routine idf $@2 . po LIST_PARAMETRE pf CORP_FONCTION

    po  shift, and go to state 28


state 23

   29 LIST_DECLARATION: LIST_DECLARATION mc_character . DECLARATION pvg

    idf  shift, and go to state 29

    DECLARATION  go to state 30


state 24

   28 LIST_DECLARATION: LIST_DECLARATION TYPE . DECLARATION pvg

    idf  shift, and go to state 29

    DECLARATION  go to state 31


state 25

    5 CORP_PROGRAM: LIST_DECLARATION LIST_INSTRUCTION . mc_end
   68 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION

    idf             shift, and go to state 32
    mc_if           shift, and go to state 33
    mc_read         shift, and go to state 34
    mc_write        shift, and go to state 35
    mc_equivalence  shift, and go to state 36
    mc_dowhile      shift, and go to state 37
    mc_end          shift, and go to state 38

    AFFECT       go to state 39
    READ         go to state 40
    WRITE        go to state 41
    CONDITION    go to state 42
    INSTRUCTION  go to state 43
    BOUCLE       go to state 44
    EQ           go to state 45


state 26

    9 ROUTINE: mc_character mc_routine idf $@3 opar_mult . CST po LIST_PARAMETRE pf CORP_FONCTION

    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    CST  go to state 48


state 27

   11 ROUTINE: mc_character mc_routine idf $@4 po . LIST_PARAMETRE pf CORP_FONCTION

    idf       shift, and go to state 49
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    $default  reduce using rule 27 (LIST_PARAMETRE)

    LIST_PARAMETRE  go to state 50
    CST             go to state 51


state 28

    7 ROUTINE: TYPE mc_routine idf $@2 po . LIST_PARAMETRE pf CORP_FONCTION

    idf       shift, and go to state 49
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    $default  reduce using rule 27 (LIST_PARAMETRE)

    LIST_PARAMETRE  go to state 52
    CST             go to state 51


state 29

   31 DECLARATION: idf .

    $default  reduce using rule 31 (DECLARATION)


state 30

   29 LIST_DECLARATION: LIST_DECLARATION mc_character DECLARATION . pvg
   32 DECLARATION: DECLARATION . vg idf
   33            | DECLARATION . mc_dimension po CST pf
   34            | DECLARATION . mc_dimension po CST vg CST pf
   35            | DECLARATION . opar_mult CST

    vg            shift, and go to state 53
    pvg           shift, and go to state 54
    mc_dimension  shift, and go to state 55
    opar_mult     shift, and go to state 56


state 31

   28 LIST_DECLARATION: LIST_DECLARATION TYPE DECLARATION . pvg
   32 DECLARATION: DECLARATION . vg idf
   33            | DECLARATION . mc_dimension po CST pf
   34            | DECLARATION . mc_dimension po CST vg CST pf
   35            | DECLARATION . opar_mult CST

    vg            shift, and go to state 53
    pvg           shift, and go to state 57
    mc_dimension  shift, and go to state 55
    opar_mult     shift, and go to state 56


state 32

   36 AFFECT: idf . aff EXPRESSION

    aff  shift, and go to state 58


state 33

   56 CONDITION: mc_if . po exp_cnd pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif
   57          | mc_if . po cst_bool pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    po  shift, and go to state 59


state 34

   50 READ: mc_read . po idf pf

    po  shift, and go to state 60


state 35

   51 WRITE: mc_write . po WRITE_ARGS pf

    po  shift, and go to state 61


state 36

   71 EQ: mc_equivalence . po LIST_PARAMETRE pf vg po LIST_PARAMETRE pf
   72   | mc_equivalence . po LIST_PARAMETRE pf

    po  shift, and go to state 62


state 37

   70 BOUCLE: mc_dowhile . po exp_cnd pf LIST_INSTRUCTION mc_enddo

    po  shift, and go to state 63


state 38

    5 CORP_PROGRAM: LIST_DECLARATION LIST_INSTRUCTION mc_end .

    $default  reduce using rule 5 (CORP_PROGRAM)


state 39

   62 INSTRUCTION: AFFECT . pvg

    pvg  shift, and go to state 64


state 40

   64 INSTRUCTION: READ . pvg

    pvg  shift, and go to state 65


state 41

   63 INSTRUCTION: WRITE . pvg

    pvg  shift, and go to state 66


state 42

   65 INSTRUCTION: CONDITION .

    $default  reduce using rule 65 (INSTRUCTION)


state 43

   68 LIST_INSTRUCTION: LIST_INSTRUCTION INSTRUCTION .

    $default  reduce using rule 68 (LIST_INSTRUCTION)


state 44

   66 INSTRUCTION: BOUCLE .

    $default  reduce using rule 66 (INSTRUCTION)


state 45

   67 INSTRUCTION: EQ . pvg

    pvg  shift, and go to state 67


state 46

   73 CST: cst_int .

    $default  reduce using rule 73 (CST)


state 47

   74 CST: cst_real .

    $default  reduce using rule 74 (CST)


state 48

    9 ROUTINE: mc_character mc_routine idf $@3 opar_mult CST . po LIST_PARAMETRE pf CORP_FONCTION

    po  shift, and go to state 68


state 49

   21 LIST_PARAMETRE: idf .

    $default  reduce using rule 21 (LIST_PARAMETRE)


state 50

   11 ROUTINE: mc_character mc_routine idf $@4 po LIST_PARAMETRE . pf CORP_FONCTION
   22 LIST_PARAMETRE: LIST_PARAMETRE . vg idf
   24               | LIST_PARAMETRE . vg CST
   25               | LIST_PARAMETRE . vg idf po CST pf
   26               | LIST_PARAMETRE . vg idf po CST vg CST pf

    pf  shift, and go to state 69
    vg  shift, and go to state 70


state 51

   23 LIST_PARAMETRE: CST .

    $default  reduce using rule 23 (LIST_PARAMETRE)


state 52

    7 ROUTINE: TYPE mc_routine idf $@2 po LIST_PARAMETRE . pf CORP_FONCTION
   22 LIST_PARAMETRE: LIST_PARAMETRE . vg idf
   24               | LIST_PARAMETRE . vg CST
   25               | LIST_PARAMETRE . vg idf po CST pf
   26               | LIST_PARAMETRE . vg idf po CST vg CST pf

    pf  shift, and go to state 71
    vg  shift, and go to state 70


state 53

   32 DECLARATION: DECLARATION vg . idf

    idf  shift, and go to state 72


state 54

   29 LIST_DECLARATION: LIST_DECLARATION mc_character DECLARATION pvg .

    $default  reduce using rule 29 (LIST_DECLARATION)


state 55

   33 DECLARATION: DECLARATION mc_dimension . po CST pf
   34            | DECLARATION mc_dimension . po CST vg CST pf

    po  shift, and go to state 73


state 56

   35 DECLARATION: DECLARATION opar_mult . CST

    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    CST  go to state 74


state 57

   28 LIST_DECLARATION: LIST_DECLARATION TYPE DECLARATION pvg .

    $default  reduce using rule 28 (LIST_DECLARATION)


state 58

   36 AFFECT: idf aff . EXPRESSION

    po        shift, and go to state 75
    idf       shift, and go to state 76
    mc_call   shift, and go to state 77
    cst_char  shift, and go to state 78
    cst_bool  shift, and go to state 79
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    EXPRESSION  go to state 80
    CALL        go to state 81
    CST         go to state 82


state 59

   56 CONDITION: mc_if po . exp_cnd pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif
   57          | mc_if po . cst_bool pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    po        shift, and go to state 83
    idf       shift, and go to state 76
    mc_call   shift, and go to state 77
    cst_char  shift, and go to state 78
    cst_bool  shift, and go to state 84
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    EXPRESSION  go to state 85
    CALL        go to state 81
    exp_cnd     go to state 86
    LALR        go to state 87
    CST         go to state 82


state 60

   50 READ: mc_read po . idf pf

    idf  shift, and go to state 88


state 61

   51 WRITE: mc_write po . WRITE_ARGS pf

    idf       shift, and go to state 89
    cst_char  shift, and go to state 90

    WRITE_ARGS  go to state 91


state 62

   71 EQ: mc_equivalence po . LIST_PARAMETRE pf vg po LIST_PARAMETRE pf
   72   | mc_equivalence po . LIST_PARAMETRE pf

    idf       shift, and go to state 49
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    $default  reduce using rule 27 (LIST_PARAMETRE)

    LIST_PARAMETRE  go to state 92
    CST             go to state 51


state 63

   70 BOUCLE: mc_dowhile po . exp_cnd pf LIST_INSTRUCTION mc_enddo

    po        shift, and go to state 83
    idf       shift, and go to state 76
    mc_call   shift, and go to state 77
    cst_char  shift, and go to state 78
    cst_bool  shift, and go to state 79
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    EXPRESSION  go to state 85
    CALL        go to state 81
    exp_cnd     go to state 93
    LALR        go to state 87
    CST         go to state 82


state 64

   62 INSTRUCTION: AFFECT pvg .

    $default  reduce using rule 62 (INSTRUCTION)


state 65

   64 INSTRUCTION: READ pvg .

    $default  reduce using rule 64 (INSTRUCTION)


state 66

   63 INSTRUCTION: WRITE pvg .

    $default  reduce using rule 63 (INSTRUCTION)


state 67

   67 INSTRUCTION: EQ pvg .

    $default  reduce using rule 67 (INSTRUCTION)


state 68

    9 ROUTINE: mc_character mc_routine idf $@3 opar_mult CST po . LIST_PARAMETRE pf CORP_FONCTION

    idf       shift, and go to state 49
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    $default  reduce using rule 27 (LIST_PARAMETRE)

    LIST_PARAMETRE  go to state 94
    CST             go to state 51


state 69

   11 ROUTINE: mc_character mc_routine idf $@4 po LIST_PARAMETRE pf . CORP_FONCTION

    $default  reduce using rule 30 (LIST_DECLARATION)

    CORP_FONCTION     go to state 95
    LIST_DECLARATION  go to state 96


state 70

   22 LIST_PARAMETRE: LIST_PARAMETRE vg . idf
   24               | LIST_PARAMETRE vg . CST
   25               | LIST_PARAMETRE vg . idf po CST pf
   26               | LIST_PARAMETRE vg . idf po CST vg CST pf

    idf       shift, and go to state 97
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    CST  go to state 98


state 71

    7 ROUTINE: TYPE mc_routine idf $@2 po LIST_PARAMETRE pf . CORP_FONCTION

    $default  reduce using rule 30 (LIST_DECLARATION)

    CORP_FONCTION     go to state 99
    LIST_DECLARATION  go to state 96


state 72

   32 DECLARATION: DECLARATION vg idf .

    $default  reduce using rule 32 (DECLARATION)


state 73

   33 DECLARATION: DECLARATION mc_dimension po . CST pf
   34            | DECLARATION mc_dimension po . CST vg CST pf

    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    CST  go to state 100


state 74

   35 DECLARATION: DECLARATION opar_mult CST .

    $default  reduce using rule 35 (DECLARATION)


state 75

   43 EXPRESSION: po . EXPRESSION pf

    po        shift, and go to state 75
    idf       shift, and go to state 76
    mc_call   shift, and go to state 77
    cst_char  shift, and go to state 78
    cst_bool  shift, and go to state 79
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    EXPRESSION  go to state 101
    CALL        go to state 81
    CST         go to state 82


state 76

   38 EXPRESSION: idf .

    $default  reduce using rule 38 (EXPRESSION)


state 77

   49 CALL: mc_call . idf po LIST_PARAMETRE pf

    idf  shift, and go to state 102


state 78

   39 EXPRESSION: cst_char .

    $default  reduce using rule 39 (EXPRESSION)


state 79

   40 EXPRESSION: cst_bool .

    $default  reduce using rule 40 (EXPRESSION)


state 80

   36 AFFECT: idf aff EXPRESSION .
   41 EXPRESSION: EXPRESSION . OPAR idf
   42           | EXPRESSION . OPAR CST
   45           | EXPRESSION . OPAR cst_char
   46           | EXPRESSION . po CST pf
   47           | EXPRESSION . po CST vg CST pf
   48           | EXPRESSION . OPAR po EXPRESSION pf

    po          shift, and go to state 103
    opar_plus   shift, and go to state 104
    opar_moins  shift, and go to state 105
    opar_div    shift, and go to state 106
    opar_mult   shift, and go to state 107

    $default  reduce using rule 36 (AFFECT)

    OPAR  go to state 108


state 81

   44 EXPRESSION: CALL .

    $default  reduce using rule 44 (EXPRESSION)


state 82

   37 EXPRESSION: CST .

    $default  reduce using rule 37 (EXPRESSION)


state 83

   43 EXPRESSION: po . EXPRESSION pf
   61 LALR: po . exp_cnd pf

    po        shift, and go to state 83
    idf       shift, and go to state 76
    mc_call   shift, and go to state 77
    cst_char  shift, and go to state 78
    cst_bool  shift, and go to state 79
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    EXPRESSION  go to state 109
    CALL        go to state 81
    exp_cnd     go to state 110
    LALR        go to state 87
    CST         go to state 82


state 84

   40 EXPRESSION: cst_bool .
   57 CONDITION: mc_if po cst_bool . pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    pf  shift, and go to state 111

    $default  reduce using rule 40 (EXPRESSION)


state 85

   41 EXPRESSION: EXPRESSION . OPAR idf
   42           | EXPRESSION . OPAR CST
   45           | EXPRESSION . OPAR cst_char
   46           | EXPRESSION . po CST pf
   47           | EXPRESSION . po CST vg CST pf
   48           | EXPRESSION . OPAR po EXPRESSION pf
   58 exp_cnd: EXPRESSION . point OPCOMP point EXPRESSION

    point       shift, and go to state 112
    po          shift, and go to state 103
    opar_plus   shift, and go to state 104
    opar_moins  shift, and go to state 105
    opar_div    shift, and go to state 106
    opar_mult   shift, and go to state 107

    OPAR  go to state 108


state 86

   56 CONDITION: mc_if po exp_cnd . pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif
   59 exp_cnd: exp_cnd . point OPLOG point LALR

    point  shift, and go to state 113
    pf     shift, and go to state 114


state 87

   60 exp_cnd: LALR .

    $default  reduce using rule 60 (exp_cnd)


state 88

   50 READ: mc_read po idf . pf

    pf  shift, and go to state 115


state 89

   53 WRITE_ARGS: idf .

    $default  reduce using rule 53 (WRITE_ARGS)


state 90

   52 WRITE_ARGS: cst_char .

    $default  reduce using rule 52 (WRITE_ARGS)


state 91

   51 WRITE: mc_write po WRITE_ARGS . pf
   54 WRITE_ARGS: WRITE_ARGS . vg cst_char
   55           | WRITE_ARGS . vg idf

    pf  shift, and go to state 116
    vg  shift, and go to state 117


state 92

   22 LIST_PARAMETRE: LIST_PARAMETRE . vg idf
   24               | LIST_PARAMETRE . vg CST
   25               | LIST_PARAMETRE . vg idf po CST pf
   26               | LIST_PARAMETRE . vg idf po CST vg CST pf
   71 EQ: mc_equivalence po LIST_PARAMETRE . pf vg po LIST_PARAMETRE pf
   72   | mc_equivalence po LIST_PARAMETRE . pf

    pf  shift, and go to state 118
    vg  shift, and go to state 70


state 93

   59 exp_cnd: exp_cnd . point OPLOG point LALR
   70 BOUCLE: mc_dowhile po exp_cnd . pf LIST_INSTRUCTION mc_enddo

    point  shift, and go to state 113
    pf     shift, and go to state 119


state 94

    9 ROUTINE: mc_character mc_routine idf $@3 opar_mult CST po LIST_PARAMETRE . pf CORP_FONCTION
   22 LIST_PARAMETRE: LIST_PARAMETRE . vg idf
   24               | LIST_PARAMETRE . vg CST
   25               | LIST_PARAMETRE . vg idf po CST pf
   26               | LIST_PARAMETRE . vg idf po CST vg CST pf

    pf  shift, and go to state 120
    vg  shift, and go to state 70


state 95

   11 ROUTINE: mc_character mc_routine idf $@4 po LIST_PARAMETRE pf CORP_FONCTION .

    $default  reduce using rule 11 (ROUTINE)


state 96

   12 CORP_FONCTION: LIST_DECLARATION . LIST_INSTRUCTION RETURN mc_endr
   28 LIST_DECLARATION: LIST_DECLARATION . TYPE DECLARATION pvg
   29                 | LIST_DECLARATION . mc_character DECLARATION pvg

    mc_character  shift, and go to state 23
    mc_real       shift, and go to state 3
    mc_integer    shift, and go to state 4
    mc_logical    shift, and go to state 5

    $default  reduce using rule 69 (LIST_INSTRUCTION)

    TYPE              go to state 24
    LIST_INSTRUCTION  go to state 121


state 97

   22 LIST_PARAMETRE: LIST_PARAMETRE vg idf .
   25               | LIST_PARAMETRE vg idf . po CST pf
   26               | LIST_PARAMETRE vg idf . po CST vg CST pf

    po  shift, and go to state 122

    $default  reduce using rule 22 (LIST_PARAMETRE)


state 98

   24 LIST_PARAMETRE: LIST_PARAMETRE vg CST .

    $default  reduce using rule 24 (LIST_PARAMETRE)


state 99

    7 ROUTINE: TYPE mc_routine idf $@2 po LIST_PARAMETRE pf CORP_FONCTION .

    $default  reduce using rule 7 (ROUTINE)


state 100

   33 DECLARATION: DECLARATION mc_dimension po CST . pf
   34            | DECLARATION mc_dimension po CST . vg CST pf

    pf  shift, and go to state 123
    vg  shift, and go to state 124


state 101

   41 EXPRESSION: EXPRESSION . OPAR idf
   42           | EXPRESSION . OPAR CST
   43           | po EXPRESSION . pf
   45           | EXPRESSION . OPAR cst_char
   46           | EXPRESSION . po CST pf
   47           | EXPRESSION . po CST vg CST pf
   48           | EXPRESSION . OPAR po EXPRESSION pf

    po          shift, and go to state 103
    pf          shift, and go to state 125
    opar_plus   shift, and go to state 104
    opar_moins  shift, and go to state 105
    opar_div    shift, and go to state 106
    opar_mult   shift, and go to state 107

    OPAR  go to state 108


state 102

   49 CALL: mc_call idf . po LIST_PARAMETRE pf

    po  shift, and go to state 126


state 103

   46 EXPRESSION: EXPRESSION po . CST pf
   47           | EXPRESSION po . CST vg CST pf

    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    CST  go to state 127


state 104

   14 OPAR: opar_plus .

    $default  reduce using rule 14 (OPAR)


state 105

   15 OPAR: opar_moins .

    $default  reduce using rule 15 (OPAR)


state 106

   16 OPAR: opar_div .

    $default  reduce using rule 16 (OPAR)


state 107

   17 OPAR: opar_mult .

    $default  reduce using rule 17 (OPAR)


state 108

   41 EXPRESSION: EXPRESSION OPAR . idf
   42           | EXPRESSION OPAR . CST
   45           | EXPRESSION OPAR . cst_char
   48           | EXPRESSION OPAR . po EXPRESSION pf

    po        shift, and go to state 128
    idf       shift, and go to state 129
    cst_char  shift, and go to state 130
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    CST  go to state 131


state 109

   41 EXPRESSION: EXPRESSION . OPAR idf
   42           | EXPRESSION . OPAR CST
   43           | po EXPRESSION . pf
   45           | EXPRESSION . OPAR cst_char
   46           | EXPRESSION . po CST pf
   47           | EXPRESSION . po CST vg CST pf
   48           | EXPRESSION . OPAR po EXPRESSION pf
   58 exp_cnd: EXPRESSION . point OPCOMP point EXPRESSION

    point       shift, and go to state 112
    po          shift, and go to state 103
    pf          shift, and go to state 125
    opar_plus   shift, and go to state 104
    opar_moins  shift, and go to state 105
    opar_div    shift, and go to state 106
    opar_mult   shift, and go to state 107

    OPAR  go to state 108


state 110

   59 exp_cnd: exp_cnd . point OPLOG point LALR
   61 LALR: po exp_cnd . pf

    point  shift, and go to state 113
    pf     shift, and go to state 132


state 111

   57 CONDITION: mc_if po cst_bool pf . mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    mc_then  shift, and go to state 133


state 112

   58 exp_cnd: EXPRESSION point . OPCOMP point EXPRESSION

    op_gt  shift, and go to state 134
    op_lt  shift, and go to state 135
    op_eq  shift, and go to state 136
    op_ge  shift, and go to state 137
    op_le  shift, and go to state 138
    op_ne  shift, and go to state 139

    OPCOMP  go to state 140


state 113

   59 exp_cnd: exp_cnd point . OPLOG point LALR

    op_and  shift, and go to state 141
    op_or   shift, and go to state 142

    OPLOG  go to state 143


state 114

   56 CONDITION: mc_if po exp_cnd pf . mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    mc_then  shift, and go to state 144


state 115

   50 READ: mc_read po idf pf .

    $default  reduce using rule 50 (READ)


state 116

   51 WRITE: mc_write po WRITE_ARGS pf .

    $default  reduce using rule 51 (WRITE)


state 117

   54 WRITE_ARGS: WRITE_ARGS vg . cst_char
   55           | WRITE_ARGS vg . idf

    idf       shift, and go to state 145
    cst_char  shift, and go to state 146


state 118

   71 EQ: mc_equivalence po LIST_PARAMETRE pf . vg po LIST_PARAMETRE pf
   72   | mc_equivalence po LIST_PARAMETRE pf .

    vg  shift, and go to state 147

    $default  reduce using rule 72 (EQ)


state 119

   70 BOUCLE: mc_dowhile po exp_cnd pf . LIST_INSTRUCTION mc_enddo

    $default  reduce using rule 69 (LIST_INSTRUCTION)

    LIST_INSTRUCTION  go to state 148


state 120

    9 ROUTINE: mc_character mc_routine idf $@3 opar_mult CST po LIST_PARAMETRE pf . CORP_FONCTION

    $default  reduce using rule 30 (LIST_DECLARATION)

    CORP_FONCTION     go to state 149
    LIST_DECLARATION  go to state 96


state 121

   12 CORP_FONCTION: LIST_DECLARATION LIST_INSTRUCTION . RETURN mc_endr
   68 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION

    idf             shift, and go to state 150
    mc_if           shift, and go to state 33
    mc_read         shift, and go to state 34
    mc_write        shift, and go to state 35
    mc_equivalence  shift, and go to state 36
    mc_dowhile      shift, and go to state 37

    RETURN       go to state 151
    AFFECT       go to state 39
    READ         go to state 40
    WRITE        go to state 41
    CONDITION    go to state 42
    INSTRUCTION  go to state 43
    BOUCLE       go to state 44
    EQ           go to state 45


state 122

   25 LIST_PARAMETRE: LIST_PARAMETRE vg idf po . CST pf
   26               | LIST_PARAMETRE vg idf po . CST vg CST pf

    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    CST  go to state 152


state 123

   33 DECLARATION: DECLARATION mc_dimension po CST pf .

    $default  reduce using rule 33 (DECLARATION)


state 124

   34 DECLARATION: DECLARATION mc_dimension po CST vg . CST pf

    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    CST  go to state 153


state 125

   43 EXPRESSION: po EXPRESSION pf .

    $default  reduce using rule 43 (EXPRESSION)


state 126

   49 CALL: mc_call idf po . LIST_PARAMETRE pf

    idf       shift, and go to state 49
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    $default  reduce using rule 27 (LIST_PARAMETRE)

    LIST_PARAMETRE  go to state 154
    CST             go to state 51


state 127

   46 EXPRESSION: EXPRESSION po CST . pf
   47           | EXPRESSION po CST . vg CST pf

    pf  shift, and go to state 155
    vg  shift, and go to state 156


state 128

   48 EXPRESSION: EXPRESSION OPAR po . EXPRESSION pf

    po        shift, and go to state 75
    idf       shift, and go to state 76
    mc_call   shift, and go to state 77
    cst_char  shift, and go to state 78
    cst_bool  shift, and go to state 79
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    EXPRESSION  go to state 157
    CALL        go to state 81
    CST         go to state 82


state 129

   41 EXPRESSION: EXPRESSION OPAR idf .

    $default  reduce using rule 41 (EXPRESSION)


state 130

   45 EXPRESSION: EXPRESSION OPAR cst_char .

    $default  reduce using rule 45 (EXPRESSION)


state 131

   42 EXPRESSION: EXPRESSION OPAR CST .

    $default  reduce using rule 42 (EXPRESSION)


state 132

   61 LALR: po exp_cnd pf .

    $default  reduce using rule 61 (LALR)


state 133

   57 CONDITION: mc_if po cst_bool pf mc_then . LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    $default  reduce using rule 69 (LIST_INSTRUCTION)

    LIST_INSTRUCTION  go to state 158


state 134

   77 OPCOMP: op_gt .

    $default  reduce using rule 77 (OPCOMP)


state 135

   78 OPCOMP: op_lt .

    $default  reduce using rule 78 (OPCOMP)


state 136

   79 OPCOMP: op_eq .

    $default  reduce using rule 79 (OPCOMP)


state 137

   80 OPCOMP: op_ge .

    $default  reduce using rule 80 (OPCOMP)


state 138

   81 OPCOMP: op_le .

    $default  reduce using rule 81 (OPCOMP)


state 139

   82 OPCOMP: op_ne .

    $default  reduce using rule 82 (OPCOMP)


state 140

   58 exp_cnd: EXPRESSION point OPCOMP . point EXPRESSION

    point  shift, and go to state 159


state 141

   75 OPLOG: op_and .

    $default  reduce using rule 75 (OPLOG)


state 142

   76 OPLOG: op_or .

    $default  reduce using rule 76 (OPLOG)


state 143

   59 exp_cnd: exp_cnd point OPLOG . point LALR

    point  shift, and go to state 160


state 144

   56 CONDITION: mc_if po exp_cnd pf mc_then . LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif

    $default  reduce using rule 69 (LIST_INSTRUCTION)

    LIST_INSTRUCTION  go to state 161


state 145

   55 WRITE_ARGS: WRITE_ARGS vg idf .

    $default  reduce using rule 55 (WRITE_ARGS)


state 146

   54 WRITE_ARGS: WRITE_ARGS vg cst_char .

    $default  reduce using rule 54 (WRITE_ARGS)


state 147

   71 EQ: mc_equivalence po LIST_PARAMETRE pf vg . po LIST_PARAMETRE pf

    po  shift, and go to state 162


state 148

   68 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION
   70 BOUCLE: mc_dowhile po exp_cnd pf LIST_INSTRUCTION . mc_enddo

    idf             shift, and go to state 32
    mc_if           shift, and go to state 33
    mc_enddo        shift, and go to state 163
    mc_read         shift, and go to state 34
    mc_write        shift, and go to state 35
    mc_equivalence  shift, and go to state 36
    mc_dowhile      shift, and go to state 37

    AFFECT       go to state 39
    READ         go to state 40
    WRITE        go to state 41
    CONDITION    go to state 42
    INSTRUCTION  go to state 43
    BOUCLE       go to state 44
    EQ           go to state 45


state 149

    9 ROUTINE: mc_character mc_routine idf $@3 opar_mult CST po LIST_PARAMETRE pf CORP_FONCTION .

    $default  reduce using rule 9 (ROUTINE)


state 150

   13 RETURN: idf . aff EXPRESSION
   36 AFFECT: idf . aff EXPRESSION

    aff  shift, and go to state 164


state 151

   12 CORP_FONCTION: LIST_DECLARATION LIST_INSTRUCTION RETURN . mc_endr

    mc_endr  shift, and go to state 165


state 152

   25 LIST_PARAMETRE: LIST_PARAMETRE vg idf po CST . pf
   26               | LIST_PARAMETRE vg idf po CST . vg CST pf

    pf  shift, and go to state 166
    vg  shift, and go to state 167


state 153

   34 DECLARATION: DECLARATION mc_dimension po CST vg CST . pf

    pf  shift, and go to state 168


state 154

   22 LIST_PARAMETRE: LIST_PARAMETRE . vg idf
   24               | LIST_PARAMETRE . vg CST
   25               | LIST_PARAMETRE . vg idf po CST pf
   26               | LIST_PARAMETRE . vg idf po CST vg CST pf
   49 CALL: mc_call idf po LIST_PARAMETRE . pf

    pf  shift, and go to state 169
    vg  shift, and go to state 70


state 155

   46 EXPRESSION: EXPRESSION po CST pf .

    $default  reduce using rule 46 (EXPRESSION)


state 156

   47 EXPRESSION: EXPRESSION po CST vg . CST pf

    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    CST  go to state 170


state 157

   41 EXPRESSION: EXPRESSION . OPAR idf
   42           | EXPRESSION . OPAR CST
   45           | EXPRESSION . OPAR cst_char
   46           | EXPRESSION . po CST pf
   47           | EXPRESSION . po CST vg CST pf
   48           | EXPRESSION . OPAR po EXPRESSION pf
   48           | EXPRESSION OPAR po EXPRESSION . pf

    po          shift, and go to state 103
    pf          shift, and go to state 171
    opar_plus   shift, and go to state 104
    opar_moins  shift, and go to state 105
    opar_div    shift, and go to state 106
    opar_mult   shift, and go to state 107

    OPAR  go to state 108


state 158

   57 CONDITION: mc_if po cst_bool pf mc_then LIST_INSTRUCTION . mc_else LIST_INSTRUCTION mc_endif
   68 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION

    idf             shift, and go to state 32
    mc_if           shift, and go to state 33
    mc_else         shift, and go to state 172
    mc_read         shift, and go to state 34
    mc_write        shift, and go to state 35
    mc_equivalence  shift, and go to state 36
    mc_dowhile      shift, and go to state 37

    AFFECT       go to state 39
    READ         go to state 40
    WRITE        go to state 41
    CONDITION    go to state 42
    INSTRUCTION  go to state 43
    BOUCLE       go to state 44
    EQ           go to state 45


state 159

   58 exp_cnd: EXPRESSION point OPCOMP point . EXPRESSION

    po        shift, and go to state 75
    idf       shift, and go to state 76
    mc_call   shift, and go to state 77
    cst_char  shift, and go to state 78
    cst_bool  shift, and go to state 79
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    EXPRESSION  go to state 173
    CALL        go to state 81
    CST         go to state 82


state 160

   59 exp_cnd: exp_cnd point OPLOG point . LALR

    po  shift, and go to state 174

    LALR  go to state 175


state 161

   56 CONDITION: mc_if po exp_cnd pf mc_then LIST_INSTRUCTION . mc_else LIST_INSTRUCTION mc_endif
   68 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION

    idf             shift, and go to state 32
    mc_if           shift, and go to state 33
    mc_else         shift, and go to state 176
    mc_read         shift, and go to state 34
    mc_write        shift, and go to state 35
    mc_equivalence  shift, and go to state 36
    mc_dowhile      shift, and go to state 37

    AFFECT       go to state 39
    READ         go to state 40
    WRITE        go to state 41
    CONDITION    go to state 42
    INSTRUCTION  go to state 43
    BOUCLE       go to state 44
    EQ           go to state 45


state 162

   71 EQ: mc_equivalence po LIST_PARAMETRE pf vg po . LIST_PARAMETRE pf

    idf       shift, and go to state 49
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    $default  reduce using rule 27 (LIST_PARAMETRE)

    LIST_PARAMETRE  go to state 177
    CST             go to state 51


state 163

   70 BOUCLE: mc_dowhile po exp_cnd pf LIST_INSTRUCTION mc_enddo .

    $default  reduce using rule 70 (BOUCLE)


state 164

   13 RETURN: idf aff . EXPRESSION
   36 AFFECT: idf aff . EXPRESSION

    po        shift, and go to state 75
    idf       shift, and go to state 76
    mc_call   shift, and go to state 77
    cst_char  shift, and go to state 78
    cst_bool  shift, and go to state 79
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    EXPRESSION  go to state 178
    CALL        go to state 81
    CST         go to state 82


state 165

   12 CORP_FONCTION: LIST_DECLARATION LIST_INSTRUCTION RETURN mc_endr .

    $default  reduce using rule 12 (CORP_FONCTION)


state 166

   25 LIST_PARAMETRE: LIST_PARAMETRE vg idf po CST pf .

    $default  reduce using rule 25 (LIST_PARAMETRE)


state 167

   26 LIST_PARAMETRE: LIST_PARAMETRE vg idf po CST vg . CST pf

    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    CST  go to state 179


state 168

   34 DECLARATION: DECLARATION mc_dimension po CST vg CST pf .

    $default  reduce using rule 34 (DECLARATION)


state 169

   49 CALL: mc_call idf po LIST_PARAMETRE pf .

    $default  reduce using rule 49 (CALL)


state 170

   47 EXPRESSION: EXPRESSION po CST vg CST . pf

    pf  shift, and go to state 180


state 171

   48 EXPRESSION: EXPRESSION OPAR po EXPRESSION pf .

    $default  reduce using rule 48 (EXPRESSION)


state 172

   57 CONDITION: mc_if po cst_bool pf mc_then LIST_INSTRUCTION mc_else . LIST_INSTRUCTION mc_endif

    $default  reduce using rule 69 (LIST_INSTRUCTION)

    LIST_INSTRUCTION  go to state 181


state 173

   41 EXPRESSION: EXPRESSION . OPAR idf
   42           | EXPRESSION . OPAR CST
   45           | EXPRESSION . OPAR cst_char
   46           | EXPRESSION . po CST pf
   47           | EXPRESSION . po CST vg CST pf
   48           | EXPRESSION . OPAR po EXPRESSION pf
   58 exp_cnd: EXPRESSION point OPCOMP point EXPRESSION .

    po          shift, and go to state 103
    opar_plus   shift, and go to state 104
    opar_moins  shift, and go to state 105
    opar_div    shift, and go to state 106
    opar_mult   shift, and go to state 107

    $default  reduce using rule 58 (exp_cnd)

    OPAR  go to state 108


state 174

   61 LALR: po . exp_cnd pf

    po        shift, and go to state 83
    idf       shift, and go to state 76
    mc_call   shift, and go to state 77
    cst_char  shift, and go to state 78
    cst_bool  shift, and go to state 79
    cst_int   shift, and go to state 46
    cst_real  shift, and go to state 47

    EXPRESSION  go to state 85
    CALL        go to state 81
    exp_cnd     go to state 110
    LALR        go to state 87
    CST         go to state 82


state 175

   59 exp_cnd: exp_cnd point OPLOG point LALR .

    $default  reduce using rule 59 (exp_cnd)


state 176

   56 CONDITION: mc_if po exp_cnd pf mc_then LIST_INSTRUCTION mc_else . LIST_INSTRUCTION mc_endif

    $default  reduce using rule 69 (LIST_INSTRUCTION)

    LIST_INSTRUCTION  go to state 182


state 177

   22 LIST_PARAMETRE: LIST_PARAMETRE . vg idf
   24               | LIST_PARAMETRE . vg CST
   25               | LIST_PARAMETRE . vg idf po CST pf
   26               | LIST_PARAMETRE . vg idf po CST vg CST pf
   71 EQ: mc_equivalence po LIST_PARAMETRE pf vg po LIST_PARAMETRE . pf

    pf  shift, and go to state 183
    vg  shift, and go to state 70


state 178

   13 RETURN: idf aff EXPRESSION .
   36 AFFECT: idf aff EXPRESSION .
   41 EXPRESSION: EXPRESSION . OPAR idf
   42           | EXPRESSION . OPAR CST
   45           | EXPRESSION . OPAR cst_char
   46           | EXPRESSION . po CST pf
   47           | EXPRESSION . po CST vg CST pf
   48           | EXPRESSION . OPAR po EXPRESSION pf

    po          shift, and go to state 103
    opar_plus   shift, and go to state 104
    opar_moins  shift, and go to state 105
    opar_div    shift, and go to state 106
    opar_mult   shift, and go to state 107

    pvg       reduce using rule 36 (AFFECT)
    $default  reduce using rule 13 (RETURN)

    OPAR  go to state 108


state 179

   26 LIST_PARAMETRE: LIST_PARAMETRE vg idf po CST vg CST . pf

    pf  shift, and go to state 184


state 180

   47 EXPRESSION: EXPRESSION po CST vg CST pf .

    $default  reduce using rule 47 (EXPRESSION)


state 181

   57 CONDITION: mc_if po cst_bool pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION . mc_endif
   68 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION

    idf             shift, and go to state 32
    mc_if           shift, and go to state 33
    mc_endif        shift, and go to state 185
    mc_read         shift, and go to state 34
    mc_write        shift, and go to state 35
    mc_equivalence  shift, and go to state 36
    mc_dowhile      shift, and go to state 37

    AFFECT       go to state 39
    READ         go to state 40
    WRITE        go to state 41
    CONDITION    go to state 42
    INSTRUCTION  go to state 43
    BOUCLE       go to state 44
    EQ           go to state 45


state 182

   56 CONDITION: mc_if po exp_cnd pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION . mc_endif
   68 LIST_INSTRUCTION: LIST_INSTRUCTION . INSTRUCTION

    idf             shift, and go to state 32
    mc_if           shift, and go to state 33
    mc_endif        shift, and go to state 186
    mc_read         shift, and go to state 34
    mc_write        shift, and go to state 35
    mc_equivalence  shift, and go to state 36
    mc_dowhile      shift, and go to state 37

    AFFECT       go to state 39
    READ         go to state 40
    WRITE        go to state 41
    CONDITION    go to state 42
    INSTRUCTION  go to state 43
    BOUCLE       go to state 44
    EQ           go to state 45


state 183

   71 EQ: mc_equivalence po LIST_PARAMETRE pf vg po LIST_PARAMETRE pf .

    $default  reduce using rule 71 (EQ)


state 184

   26 LIST_PARAMETRE: LIST_PARAMETRE vg idf po CST vg CST pf .

    $default  reduce using rule 26 (LIST_PARAMETRE)


state 185

   57 CONDITION: mc_if po cst_bool pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif .

    $default  reduce using rule 57 (CONDITION)


state 186

   56 CONDITION: mc_if po exp_cnd pf mc_then LIST_INSTRUCTION mc_else LIST_INSTRUCTION mc_endif .

    $default  reduce using rule 56 (CONDITION)
